# üîê Forgot Password ‚Äî Functional Flow & System Instructions

---

## üß≠ Page Overview

The **Forgot Password Page** must allow the user to securely reset their password using one of **three selectable methods**:

1. **Email Verification**
2. **Message the Admin for Permission**
3. **2FA Code (if enabled in the account)**

This page must sync accurately with the backend and database, updating user credentials in real time after verification and completion.

---

## üß© Page Layout & Behavior Instructions

**Page:** `http://localhost:8080/forgot-password`

### Components:

* **Dropdown / Radio Selector**
  Label: ‚ÄúChoose how to reset your password‚Äù
  Options:

  * Email Verification
  * Message the Admin
  * Use 2FA Code (if enabled)

* **Dynamic Section Container**
  Displays only the form elements required for the selected method.

* **Form Actions**

  * ‚ÄúSend Reset Code‚Äù or ‚ÄúSend Request‚Äù
  * ‚ÄúVerify Code‚Äù
  * ‚ÄúCreate New Password‚Äù
  * ‚ÄúConfirm New Password‚Äù
  * ‚ÄúReset Password‚Äù button (final step)

* **UI Rules**

  * Input fields must have *eye visibility toggle icons* for password fields.
  * Buttons use system‚Äôs existing color and design ‚Äî no UI change, only functional addition.
  * Loading animation appears during verification or reset process.

---

## üß† FLOW 1 ‚Äî Reset via Email Verification

### Step 1: Select Option

User selects **Email** from the reset method options.

### Step 2: Send Reset Code

* Input: `Registered Email Address`
* Click **Send Reset Code**.
* Backend sends a **unique verification code** to the provided email.

### Step 3: User Mailbox Action

* User checks their **email inbox** for the reset code.
* User copies and pastes the code into the input field on the Forgot Password page.

### Step 4: Code Verification

* System verifies the code against database entry.
* If valid ‚Üí page loads the **Create New Password Form**.

### Step 5: Create New Password

* Two fields:

  * **New Password** (with eye visibility toggle)
  * **Confirm Password** (with eye visibility toggle)
* Both must match before proceeding.

### Step 6: Completion

* Once confirmed, the system updates the password in the database.
* Display message:
  ‚úÖ ‚ÄúReset and new password successfully created.‚Äù

---

## üß∞ FLOW 2 ‚Äî Message the Admin (Manual Permission Reset)

### Step 1: Select Option

User selects **Message the Admin** from the reset method options.

### Step 2: Send Request

* Input: `Registered Email or ID`
* Click **Send Request**.

### Step 3: Admin Notification

* Admin receives a **notification** via notification bell in real time.
* Message Example:
  ‚ÄúUser [Student/Admin Name, ID] has requested to reset their password.‚Äù
  Options for Admin:

  * ‚úÖ **Yes (Grant Reset Permission)**
  * ‚ùå **No (Reject Request)**

### Step 4: Approval Sync

* If **Yes**, the user‚Äôs Forgot Password page automatically loads the **Create New Password Form** (real-time event).
* If **No**, the user receives a message:
  ‚ÄúYour password reset request has been denied. Please contact your administrator.‚Äù

### Step 5: Create New Password

* Show:

  * **New Password** (eye toggle)
  * **Confirm Password** (eye toggle)
* Once confirmed, update the user password in the database.

### Step 6: Completion

Show confirmation message:
‚úÖ ‚ÄúPassword successfully reset and created with admin approval.‚Äù

---

## üîë FLOW 3 ‚Äî Reset Using 2FA Code (if Enabled)

### Step 1: Option Check

This option appears only if the user has previously enabled **2FA Authentication**.

### Step 2: Verification

* Input: `2FA Code` (from Google Authenticator app).
* Click **Verify 2FA Code**.
* Backend verifies code accuracy (TOTP validation).

### Step 3: Authentication Pass

If verified successfully ‚Üí transition to **Create New Password Form**.

### Step 4: Create New Password

Fields:

* New Password (eye visibility toggle)
* Confirm Password (eye visibility toggle)

### Step 5: Completion

Once submitted, system:

* Updates the password in the database.
* Logs activity under user‚Äôs **Recent Account Activity**.
* Shows success message:
  ‚úÖ ‚ÄúPassword reset completed using 2FA verification.‚Äù

---

## üß© Backend Integration Notes

* Each reset option (Email / Admin / 2FA) triggers backend route:

  * `POST /api/auth/request-reset`
  * `POST /api/auth/verify-code`
  * `POST /api/auth/reset-password`
* Passwords stored securely with **bcrypt hashing**.
* Expired or invalid codes must return:
  ‚ö†Ô∏è ‚ÄúInvalid or expired reset code. Please try again.‚Äù
* All actions logged in:

  * `user_activity_logs`
  * `notifications` (for admin requests)

---

## üß† AI Assistant Interaction (Optional)

If AI Assistant ‚ÄúJose‚Äù is active during Forgot Password:

* When user gets confused, AI may suggest:

  > ‚ÄúWould you like me to help you request an admin reset?‚Äù

  * If user confirms, AI triggers `/api/auth/message-admin`.
  * AI confirms request and provides estimated response time.

---

## üì≤ Responsiveness & UI Layout

| Device    | Layout Behavior                                                     |
| --------- | ------------------------------------------------------------------- |
| Desktop   | Side-by-side card layout (Selector left, form right)                |
| Tablet    | Stacked layout with visible progress bar                            |
| Mobile    | Collapsible sections; selector above form                           |
| All modes | Keep font, color, shadow, and padding consistent with main UI theme |

---

## ‚úÖ Final Function Validation

After development, confirm the following:

1. All three reset methods work independently.
2. Database updates accurately after reset.
3. Email verification and admin notifications trigger correctly.
4. 2FA validation works using Google Authenticator.
5. No design, color, or UI inconsistency across views.
6. Responsive layout works in Desktop, Tablet, and Mobile mode.
7. Every reset action is logged under **Recent Account Activity** with timestamp.

---
